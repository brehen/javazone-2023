// // Prevents additional console window on Windows in release, DO NOT REMOVE!!
// #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
//
// use app::utilities::bt_scan::bt_scan;
// use std::any::Any;
// use std::env;
// use std::fs::File;
// use std::io::Write;
// use std::process::Command;
// use std::time::Duration;
// use wait_timeout::ChildExt;
//
// // Learn more about Tauri commands at https://tauri.app/v1/guides/features/command
// // #[tauri::command]
// // fn greet(name: &str) -> String {
// //     format!("Hello, {}! You've been greeted from Rust!", name)
// // }
//
// #[tauri::command]
// fn flash_display_nrf(commands: &str) -> String {
//     println!("{:?}", commands);
//     let target_dir = "../src-microbit/attempts/attempt2.json";
//
//     File::create(target_dir)
//         .unwrap()
//         .write_all(commands.as_bytes())
//         .expect("Error writing to file");
//
//     let one_sec = Duration::from_secs(2);
//
//     let mut child = Command::new("sh")
//         .current_dir("../src-microbit")
//         .arg("-c")
//         .arg("cargo rb input_from_build")
//         //.arg("probe-run --list-probes")
//         .spawn()
//         .expect("ls command failed to start");
//
//     let status_code = match child.wait_timeout(one_sec).unwrap() {
//         Some(status) => status.code(),
//         None => {
//             println!("None in status_code");
//             child.kill().unwrap();
//             child.wait().unwrap().code()
//         }
//     };
//
//     if status_code.is_some() {
//         println!("{:?}", status_code);
//     }
//
//     format!("Hello, {}! You've been greeted from Rust!", commands)
// }
//
// #[tauri::command]
// fn scan_bt_tt() -> Vec<u8> {
//     println!("Scanning");
//     return bt_scan();
// }
// #[tokio::main]
// async fn main() {
//     tauri::Builder::default()
//         .invoke_handler(tauri::generate_handler![flash_display_nrf])
//         .invoke_handler(tauri::generate_handler![scan_bt_tt])
//         .run(tauri::generate_context!())
//         .expect("error while running tauri application");
// }
//
#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use tauri::Manager;
use tokio::sync::mpsc;
use tokio::sync::Mutex;
use tracing::info;

struct AsyncProcInputTx {
    inner: Mutex<mpsc::Sender<String>>,
}

fn main() {
    tracing_subscriber::fmt::init();

    let (async_proc_input_tx, async_proc_input_rx) = mpsc::channel(1);
    let (async_proc_output_tx, mut async_proc_output_rx) = mpsc::channel(1);

    tauri::Builder::default()
        .manage(AsyncProcInputTx {
            inner: Mutex::new(async_proc_input_tx),
        })
        .invoke_handler(tauri::generate_handler![js2rs])
        .setup(|app| {
            tauri::async_runtime::spawn(async move {
                async_process_model(async_proc_input_rx, async_proc_output_tx).await
            });

            let app_handle = app.handle();
            tauri::async_runtime::spawn(async move {
                loop {
                    if let Some(output) = async_proc_output_rx.recv().await {
                        rs2js(output, &app_handle);
                    }
                }
            });

            Ok(())
        })
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

fn rs2js<R: tauri::Runtime>(message: String, manager: &impl Manager<R>) {
    info!(?message, "rs2js");
    manager
        .emit_all("rs2js", format!("rs: {}", message))
        .unwrap();
}

#[tauri::command]
async fn js2rs(message: String, state: tauri::State<'_, AsyncProcInputTx>) -> Result<(), String> {
    info!(?message, "js2rs");
    let async_proc_input_tx = state.inner.lock().await;
    async_proc_input_tx
        .send(message)
        .await
        .map_err(|e| e.to_string())
}

#[tauri::command]
async fn async_command() -> String {
    tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
    "Async command finished".to_string()
}

async fn async_process_model(
    mut input_rx: mpsc::Receiver<String>,
    output_tx: mpsc::Sender<String>,
) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    while let Some(input) = input_rx.recv().await {
        let output = input;
        output_tx.send(output).await?;
    }

    Ok(())
}
